Step-by-Step Implementation

npm install react-oidc-context

2. Setup OIDC Configuration
// src/authConfig.js
export const oidcConfig = {
  authority: "https://your-forgerock-domain/oauth2/realms/root", // Replace
  client_id: "your-client-id",
  redirect_uri: "http://localhost:3000/callback",
  response_type: "code",
  scope: "openid profile email",
  post_logout_redirect_uri: "http://localhost:3000/",
  automaticSilentRenew: true,
};

3. Wrap App with AuthProvider

// src/index.js
import React from "react";
import ReactDOM from "react-dom/client";
import { AuthProvider } from "react-oidc-context";
import { oidcConfig } from "./authConfig";
import App from "./App";

ReactDOM.createRoot(document.getElementById("root")).render(
  <AuthProvider {...oidcConfig}>
    <App />
  </AuthProvider>
);

4. App Routing and Components

// src/App.js
import React from "react";
import { useAuth } from "react-oidc-context";
import Dashboard from "./Dashboard";

const App = () => {
  const auth = useAuth();

  if (auth.isLoading) return <p>Loading...</p>;
  if (auth.error) return <p>Error: {auth.error.message}</p>;

  if (!auth.isAuthenticated) {
    return <button onClick={() => auth.signinRedirect()}>Login</button>;
  }

  return <Dashboard />;
};

export default App;

5. Dashboard + Token Parsing + Auto-Refresh

// src/Dashboard.js
import React, { useEffect } from "react";
import { useAuth } from "react-oidc-context";

const Dashboard = () => {
  const auth = useAuth();

  useEffect(() => {
    const accessToken = auth.user?.access_token;
    const idToken = auth.user?.id_token;
    console.log("Access Token:", accessToken);
    console.log("ID Token:", idToken);
  }, [auth.user]);

  useEffect(() => {
    let timeout;
    let lastActive = Date.now();

    const checkInactivity = () => {
      const now = Date.now();
      const diff = now - lastActive;
      const maxIdle = 5 * 60 * 1000; // 5 mins

      if (diff > maxIdle) {
        auth.signoutRedirect();
      }
    };

    const resetTimer = () => {
      lastActive = Date.now();
    };

    document.addEventListener("mousemove", resetTimer);
    document.addEventListener("keypress", resetTimer);

    timeout = setInterval(() => {
      checkInactivity();
      auth.signinSilent(); // silent token refresh
    }, 60 * 1000); // every 1 minute

    return () => {
      clearInterval(timeout);
      document.removeEventListener("mousemove", resetTimer);
      document.removeEventListener("keypress", resetTimer);
    };
  }, [auth]);

  return (
    <div>
      <h2>Welcome to Dashboard</h2>
      <button onClick={() => auth.signoutRedirect()}>Logout</button>
    </div>
  );
};

export default Dashboard;
